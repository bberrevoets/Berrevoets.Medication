@page
@model IndexModel
@{
    ViewData["Title"] = "Home";
}

@if (!Model.IsLoggedIn)
{
    <div class="text-center">
        <h1 class="display-4">Welcome</h1>
        <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
    </div>
}
else
{
    <!-- Dashboard for logged in users -->
    <div>
        <h1>Hello, @Model.Profile?.Username</h1>
        <p>Email: @Model.Profile?.Email</p>
        <p>Phone: @Model.Profile?.PhoneNumber</p>
        <p>Member Since: @Model.Profile?.CreatedDate.ToShortDateString()</p>
    </div>

    <hr/>

    <div>
        <h2>Your Medicine Uses</h2>
        @if (!Model.MedicineUses.Any())
        {
            <p>You haven't added any medicines to your list.</p>
        }
        else
        {
            <table class="table table-bordered">
                <thead>
                <tr>
                    <th>Medicine</th>
                    <th>Daily Dose</th>
                    <th>Stock At Home</th>
                    <th>Remaining Days</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var use in Model.MedicineUses)
                {
                    <tr>
                        <td>@use.MedicineName</td>
                        <td>@use.DailyDose</td>
                        <td>@use.StockAtHome</td>
                        <td>@(use.RemainingDays.HasValue ? use.RemainingDays.Value.ToString("F1") : "N/A")</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary" onclick="openActionModal(@use.Id, 'setDose', @use.DailyDose)">Set Dose</button>
                            <button class="btn btn-sm btn-outline-primary" onclick="openActionModal(@use.Id, 'setStock', @use.StockAtHome)">Set Stock</button>
                            <button class="btn btn-sm btn-outline-primary" onclick="openActionModal(@use.Id, 'addStock', 0)">Add Stock</button>
                            <button class="btn btn-sm btn-outline-danger" onclick="openActionModal(@use.Id, 'delete', 0)">Delete</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        }
    </div>

    <!-- Action Modal (reused for all actions) -->
    <div class="modal fade" id="actionModal" tabindex="-1" aria-labelledby="actionModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content custom-modal-card">
                <div class="modal-header custom-modal-header">
                    <h5 class="modal-title" id="actionModalLabel"></h5>
                </div>
                <div class="modal-body" id="actionModalBody">
                    <!-- Content injected by JavaScript -->
                </div>
                <div class="modal-footer custom-modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="submitAction()">Confirm</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Hidden anti-forgery form for AJAX calls -->
    <form id="antiForgeryForm">
        @Html.AntiForgeryToken()
    </form>
}

@section Scripts {
    <script>
        // Assign the JWT token from the User claims to a global variable.
        var jwtToken = '@User.FindFirst("Token")?.Value';
    </script>

    <script>
        // Global variables for action modal
        var actionUseId = null;
        var actionType = "";
        var currentValue = 0;

        function openActionModal(id, type, value) {
            actionUseId = id;
            actionType = type;
            currentValue = value;
            var modalTitle = "";
            var modalBodyHtml = "";
            if (type === 'setDose') {
                modalTitle = "Set Daily Dose";
                modalBodyHtml = `<div class="mb-3"><label for="newValue" class="form-label">New Daily Dose:</label><input type="number" id="newValue" class="form-control" value="${
                    value}"/></div>`;
            } else if (type === 'setStock') {
                modalTitle = "Set Stock At Home";
                modalBodyHtml = `<div class="mb-3"><label for="newValue" class="form-label">New Stock:</label><input type="number" id="newValue" class="form-control" value="${
                    value}"/></div>`;
            } else if (type === 'addStock') {
                modalTitle = "Add Stock";
                modalBodyHtml = '<div class="mb-3"><label for="newValue" class="form-label">Additional Stock to Add:</label>' +
                    '<input type="number" id="newValue" class="form-control" value="0"/></div>';
            } else if (type === 'delete') {
                modalTitle = "Delete Medicine Use";
                modalBodyHtml = '<p>Are you sure you want to delete this medicine use?</p>';
            }
            document.getElementById("actionModalLabel").innerHTML = modalTitle;
            document.getElementById("actionModalBody").innerHTML = modalBodyHtml;
            const modalEl = document.getElementById("actionModal");
            const modal = new bootstrap.Modal(modalEl);
            modal.show();
        }

        function submitAction() {
            var newValue = 0;
            if (actionType !== 'delete') {
                newValue = parseInt(document.getElementById("newValue").value);
            }
            var url = "";
            var data = { id: actionUseId };
            if (actionType === 'setDose') {
                url = '@Url.Page("Index", "UpdateMedicineUse")';
                data = { id: actionUseId, newDailyDose: newValue, newStockAtHome: null, addStock: false };
            } else if (actionType === 'setStock') {
                url = '@Url.Page("Index", "UpdateMedicineUse")';
                data = { id: actionUseId, newDailyDose: null, newStockAtHome: newValue, addStock: false };
            } else if (actionType === 'addStock') {
                url = '@Url.Page("Index", "UpdateMedicineUse")';
                data = { id: actionUseId, newDailyDose: null, newStockAtHome: newValue, addStock: true };
            } else if (actionType === 'delete') {
                url = '@Url.Page("Index", "DeleteMedicineUse")';
                data = { id: actionUseId };
            }
            const antiForgeryToken = $('#antiForgeryForm input[name="__RequestVerificationToken"]').val();
            $.ajax({
                url: url,
                method: 'POST',
                data: data,
                headers: {
                    'RequestVerificationToken': antiForgeryToken,
                    'Authorization': 'Bearer ' + jwtToken
                },
                success: function(response) {
                    if (response.success) {
                        window.showToast("Success", "Action completed successfully.", "success");
                        // Remove the row on deletion or refresh UI as needed.
                        $(`#useRow_${actionUseId}`).remove();
                    } else {
                        window.showToast("Error", "Action failed.", "error");
                    }
                    closeActionModal();
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    console.error("AJAX Error:", textStatus, errorThrown);
                    window.showToast("Error", "Action failed.", "error");
                    closeActionModal();
                }
            });
        }

        function closeActionModal() {
            const modalEl = document.getElementById("actionModal");
            const modal = bootstrap.Modal.getInstance(modalEl);
            if (modal) {
                modal.hide();
            }
        }
    </script>
}
