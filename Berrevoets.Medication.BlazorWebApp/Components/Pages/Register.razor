@page "/register"
@using System.ComponentModel.DataAnnotations
@using System.Net
@inject IHttpClientFactory HttpFactory
@inject NavigationManager Navigation

<h3>Register</h3>

<EditForm Model="_registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="mb-3">
        <label for="username" class="form-label">Username</label>
        <InputText id="username" class="form-control" @bind-Value="_registerModel.Username"/>
    </div>
    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="_registerModel.Email"/>
    </div>
    <div class="mb-3">
        <label for="phone" class="form-label">Phone Number (optional)</label>
        <InputText id="phone" class="form-control" @bind-Value="_registerModel.PhoneNumber"/>
    </div>
    <div class="mb-3">
        <label for="password" class="form-label">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="_registerModel.Password"/>
    </div>
    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirm Password</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="_registerModel.ConfirmPassword"/>
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-3">@_errorMessage</div>
}

@code {
    private readonly RegisterModel _registerModel = new();
    private string _errorMessage = string.Empty;

    private async Task HandleRegister()
    {
        _errorMessage = string.Empty;

        // Check for password confirmation
        if (_registerModel.Password != _registerModel.ConfirmPassword)
        {
            _errorMessage = "Passwords do not match.";
            return;
        }

        // Post the registration data to the User API
        var http = HttpFactory.CreateClient("UserApi");
        var response = await http.PostAsJsonAsync("api/users/register", _registerModel);
        if (response.IsSuccessStatusCode)
        {
            // Redirect to the login page on success
            Navigation.NavigateTo("/login");
        }
        else
        {
            var responseMsg = await response.Content.ReadAsStringAsync();
            _errorMessage = $"Registration failed: {responseMsg}";
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Username is required.")]
        [StringLength(50, ErrorMessage = "Username cannot exceed 50 characters.")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        [StringLength(100, ErrorMessage = "Email cannot exceed 100 characters.")]
        public string Email { get; set; } = string.Empty;

        [StringLength(20, ErrorMessage = "Phone number cannot exceed 20 characters.")]
        public string? PhoneNumber { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm password is required.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

}