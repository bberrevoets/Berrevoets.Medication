@page "/catalog"
@using System.Net
@using System.Net.Http.Headers
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory HttpClientFactory

@attribute [Authorize]

<h3>Medicine Catalog</h3>

@if (_medicines == null)
{
    <p>Loading catalog...</p>
}
else if (!_medicines.Any())
{
    <p>No medicines available.</p>
}
else
{
    <div class="row row-cols-1 row-cols-md-4 g-4">
        @foreach (var med in _medicines)
        {
            <div class="col">
                <div class="card h-100 custom-card"
                     @onclick="() => OpenModal(med)"
                     style="cursor:pointer;">
                    <div class="card-body">
                        <h5 class="card-title">@med.Name</h5>
                        <p class="card-text">@med.Description</p>
                    </div>
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item"><strong>Manufacturer:</strong> @med.Manufacturer</li>
                        <li class="list-group-item"><strong>Stock:</strong> @med.Stock</li>
                    </ul>
                </div>
            </div>
        }
    </div>
}

<!-- Backdrop: always rendered, toggled by "show" -->
<div class="modal-backdrop-custom @( _showModal ? "show" : "" )"></div>

<!-- Modal container: always rendered, toggled by "show" -->
<div class="modal-popover-container @( _showModal ? "show" : "" )">
    @if (_selectedMedicine is not null)
    {
        <div class="card custom-modal-card">
            <!-- BLUE HEADER (Name + Description, white text) -->
            <div class="custom-modal-header">
                <h5 class="mb-1">@_selectedMedicine.Name</h5>
                <p class="mb-0">@_selectedMedicine.Description</p>
            </div>

            <!-- WHITE BODY (black text) with manufacturer, stock, and buttons on same line -->
            <div class="custom-modal-body">
                <p><strong>Manufacturer:</strong> @_selectedMedicine.Manufacturer</p>

                <!-- A horizontal line, then stock + buttons on one row -->
                <div class="border-top pt-2 mt-2 d-flex justify-content-between align-items-center">
                    <div>
                        <strong>Stock:</strong> @_selectedMedicine.Stock
                    </div>
                    <div>
                        <button class="btn btn-secondary me-2" @onclick="CloseModal">Cancel</button>
                        <button class="btn btn-primary" @onclick="AddToUserList">Add to own list</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<MedicineCatalogItem>? _medicines;
    private bool _loading = true;
    private MedicineCatalogItem? _selectedMedicine;
    private bool _showModal = false;
    private string? token;
    private ClaimsPrincipal? user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;
        if (!user.Identity?.IsAuthenticated == true)
        {
            Navigation.NavigateTo("/login", true);
            return;
        }

        var client = HttpClientFactory.CreateClient("MedicineCatalogApi");
        token = user.FindFirst("jti")?.Value;

        if (!string.IsNullOrEmpty(token))
        {
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }

        _medicines = await client.GetFromJsonAsync<List<MedicineCatalogItem>>("api/medicines");
        _loading = false;
    }

    private void OpenModal(MedicineCatalogItem med)
    {
        _selectedMedicine = med;
        _showModal = true;
    }

    private async void CloseModal()
    {
        // 1. Remove "show" class so container transitions from scale(1) -> scale(0)
        _showModal = false;
        // 2. Immediately re-render so user sees the transition
        StateHasChanged();

        // 3. Wait for the CSS transition to finish (300ms)
        await Task.Delay(300);

        // 4. Clear content after the shrink animation completes
        _selectedMedicine = null;
        StateHasChanged();
    }

    private async Task AddToUserList()
    {
        if (_selectedMedicine is null)
            return;

        var clientUses = HttpClientFactory.CreateClient("MedicineUsesApi");
        if (!string.IsNullOrEmpty(token))
        {
            clientUses.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        }

        var body = new
        {
            UserId = user?.FindFirst("id")?.Value,
            MedicineName = _selectedMedicine.Name,
            DailyDose = 1,
            StockAtHome = _selectedMedicine.Stock
        };

        var response = await clientUses.PostAsJsonAsync("api/medicineuses", body);
        // Handle success/failure if desired

        CloseModal();
    }

    public class MedicineCatalogItem
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string? Description { get; set; }
        public string? Manufacturer { get; set; }
        public int Stock { get; set; }
    }
}
